{"version":3,"sources":["hooks/useSocket.ts","views/chat/components/people-list/PeopleList.tsx","views/chat/components/chat-toolbar/ChatToolbar.tsx","views/chat/components/chat-text/ChatInput.tsx","views/chat/components/chat-text/ChatText.tsx","views/chat/components/login-form/LoginForm.tsx","views/chat/Chat.tsx","views/App.tsx","serviceWorker.ts","index.tsx"],"names":["useSocket","url","useState","socket","setSocket","useEffect","io","disconnect","peopleStyles","createStyles","list","overflowY","height","width","backgroundColor","avatar","marginRight","title","root","display","flexDirection","alignItems","PeopleList","props","classes","users","className","length","Divider","List","map","user","Fragment","key","id","ListItem","dense","button","Avatar","alt","src","ListItemText","primary","username","defaultProps","withStyles","chatToolbarStyles","chatToolbarRoot","color","margin","minHeight","borderRadius","innerContent","chatTitle","searchWrapper","border","searchInput","paddingLeft","transition","opacity","searchIcon","marginTop","Toolbar","disableGutters","Typography","Input","input","disableUnderline","placeholder","endAdornment","chatInputStyles","composeInputPaper","composeInput","padding","sendIcon","ChatInput","text","setText","handleSendButton","handleUserKeyPress","event","keyCode","preventDefault","window","addEventListener","removeEventListener","Paper","elevation","multiline","value","fullWidth","onChange","target","Button","variant","onClick","endIcon","chatTextStyles","chatInputPaper","chatInput","chatRoomMessage","marginBottom","fontSize","marginLeft","ChatText","messages","message","Chip","label","FormDialog","open","setOpen","setUsername","Dialog","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","type","DialogActions","onSubmit","styles","paper","gridContainer","gridItem","fontFamily","setMessages","setUsers","on","emit","Grid","container","spacing","Hidden","mdDown","item","md","xs","App","CssBaseline","Chat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ceb3a6be.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport io from 'socket.io-client'\n\nconst useSocket = (url: string) => {\n    const [socket, setSocket] = useState(null)\n\n    useEffect(() => {\n        const socket: any = io(url)\n        setSocket(socket)\n        return () => socket.disconnect\n    }, [url])\n\n    return socket\n}\n\nexport default useSocket","import { createStyles, List, ListItem, Avatar, ListItemText, Divider, withStyles } from \"@material-ui/core\"\nimport React from \"react\"\nimport { User } from 'models/user/model'\n\nconst peopleStyles = createStyles({\n\tlist: {\n\t\toverflowY: 'scroll',\n        height: '100%',\n        width: '-webkit-fill-available',\n\t\t'&::-webkit-scrollbar': {\n\t\t\twidth: '5px',\n\t\t\theight: '8px',\n\t\t\tbackgroundColor: '#FFF'\n\t\t},\n\t\t'&::-webkit-scrollbar-thumb': {\n\t\t\tbackgroundColor: '#025279' //'#23232F' //'#0595DD'\n\t\t},\n    },\n    avatar: {\n        marginRight: '10px',\n    },\n    title: {\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n})\n\ninterface IProps {\n    classes: any,\n    users?: User[],\n}\n\nconst defaultProps: IProps = {\n    classes: {},\n    users: [],\n}\n\nconst PeopleList: React.FC<IProps> = props => {\n\n\tconst classes: any = props.classes\n\tconst users: User[] = props.users! //TODO: Delete ! operator when props are done\n\n\treturn (\n        <div className={classes.root}>\n            <h3 className={classes.title}>{`Active Users (${users.length})`}</h3>\n            <Divider />\n            <List className={classes.list}>\n                {users.map((user: User) => (\n                    <React.Fragment key={user.id}>\n                        <ListItem dense button>\n                            <Avatar alt='Remy Sharp' src={user.avatar} className={classes.avatar} />\n                            <ListItemText primary={user.username} />\n                        </ListItem>\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List>\n        </div>\n\t)\n}\n\nPeopleList.defaultProps = defaultProps\n\nexport default withStyles(peopleStyles)(PeopleList)","import { createStyles, Toolbar, Typography, Input, withStyles } from \"@material-ui/core\"\nimport SearchIcon from '@material-ui/icons/Search'\nimport React from \"react\"\n\nconst chatToolbarStyles = createStyles({\n\tchatToolbarRoot: {\n\t\tcolor: '#FFF',\n\t\tmargin: '8px',\n\t\tminHeight: '32px',\n\t\tbackgroundColor: '#0377ad', //'#0595DD', //'#23232F',\n\t\tborderRadius: '2px'\n\t},\n\tinnerContent: {\n\t\twidth: '100%',\n\t},\n\tchatTitle: {\n\t\tmargin: '0 auto'\n\t},\n\tsearchWrapper: {\n\t\tbackgroundColor: '#025279',\n\t\tborderRadius: '3px',\n\t\tborder: 'solid 1px #025279',\n\t\tcolor: '#FFF',\n\t\tmargin: '5px'\n\t},\n\tsearchInput: {\n\t\twidth: '180px',\n\t\tpaddingLeft: '8px',\n\t\ttransition: 'width 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms',\n\t\t'&::placeholder': {\n\t\t\tcolor: '#FFF',\n\t\t\topacity: 1\n\t\t},\n\t\t'&:focus': {\n\t\t\twidth: '300px'\n\t\t}\n\t},\n\tsearchIcon: {\n\t\tcolor: '#FFF',\n\t\tmarginTop: '3px'\n\t}\n})\n\ninterface IProps {\n    classes: any,\n}\n\nconst ChatToolbar: React.FC<IProps> = props => {\n\n\n\t\tconst { classes } = props\n\n\t\treturn (\n\t\t\t<Toolbar disableGutters={true} className={classes.chatToolbarRoot}>\n\t\t\t\t<Typography className={classes.chatTitle} color=\"inherit\">\n                    Now talking in \"Wonderful Chatroom\"\n\t\t\t\t</Typography>\n\t\t\t\t<Input classes={{ root: classes.searchWrapper, input: classes.searchInput }} disableUnderline={true} placeholder={'Search'} \n\t\t\t\t\tendAdornment={<SearchIcon className={classes.searchIcon} />}\n\t\t\t\t/>        \n\t\t\t</Toolbar>\n\t\t)\n\n}\n\nexport default withStyles(chatToolbarStyles)(ChatToolbar)","import React, { useState, useEffect } from \"react\"\nimport { createStyles, Paper, Input, withStyles } from \"@material-ui/core\"\nimport Button from '@material-ui/core/Button'\nimport SendIcon from '@material-ui/icons/Send'\n\nconst chatInputStyles = createStyles({\n\tcomposeInputPaper: {\n        display: 'flex',\n        marginTop: '16px',\n\t},\n\tcomposeInput: {\n        padding: '16px',\n\t},\n\tsendIcon: {\n\t\tcolor: '#2196f3'\n\t},\n})\n\ninterface IProps {\n    classes: any\n    handleSendButton?: Function\n}\n\nconst defaultProps: IProps = {\n    classes: {},    \n}\n\nconst ChatInput: React.FC<IProps> = props => {\n\n\t\tconst classes = props.classes\n\n        const [text, setText] = useState('')\n\n        const handleTextChange = (event: any) => setText(event.target.value)\n        const handleSendButton = (): any => {\n            setText('')\n            props.handleSendButton!(text)\n        }\n\n        const handleUserKeyPress = (event: any) => {\n            const { keyCode } = event;\n        \n            if (keyCode === 13) {\n                event.preventDefault();\n                handleSendButton()\n            }\n        };\n\n        useEffect(() => {\n            window.addEventListener('keydown', handleUserKeyPress);\n        \n            return () => {\n              window.removeEventListener('keydown', handleUserKeyPress);\n            };\n        });\n\n        return (\n\t\t\t<Paper className={classes.composeInputPaper} elevation={4}>\n                <Input \n                    classes={{ root: classes.composeInput }} multiline={true} value={text} \n                    fullWidth={true} disableUnderline={true} placeholder={'Send a message!'} \n                    onChange={handleTextChange}    \n                />\n                <Button\n                    variant='contained'\n                    color='primary'\n                    onClick={handleSendButton}\n                    endIcon={<SendIcon className={classes.searchIcon} />}\n                >\n                    Send\n                </Button>\n\t\t\t</Paper>\n\t\t)\n\n}\n\nChatInput.defaultProps = defaultProps\n\nexport default withStyles(chatInputStyles)(ChatInput)\n","import React from \"react\"\nimport { createStyles, Paper, Avatar, withStyles, Chip } from \"@material-ui/core\"\nimport { Message } from 'models/message/model'\nimport ChatInput from \"./ChatInput\"\n\nconst chatTextStyles = createStyles({\n\troot: {\n\t\tmargin: '8px',\n\t\theight: 'calc(100% - 80px)',\n\t},\n\tchatInputPaper: {\n\t\theight: 'calc(100% - 64px)'\n\t},\n\tchatInput: {\n\t\toverflowY: 'scroll',\n\t\theight: '100%',\n\t\tpadding: '16px',\n\t},\n\tchatRoomMessage: {\n\t\tdisplay: 'flex',\n\t\tmarginBottom: '8px'\n\t},\n\tusername: {\n        fontSize: '10px',\n        marginBottom: '0px',\n        marginTop: '0px',\n        marginLeft: '5px',\n    },\n    text: {\n        marginLeft: '5px',\n    }\n})\n\ninterface IProps {\n    classes: any\n    messages?: Message[]\n    handleSendButton?: Function\n}\n\nconst defaultProps: IProps = {\n    classes: {},\n    messages: [],\n    \n}\n\nconst ChatText: React.FC<IProps> = props => {\n\n\t\tconst messages = props.messages! //TODO: Delete ! operator when props are done\n\t\tconst classes = props.classes\n\n        return (\n\t\t\t<section className={classes.root}>\n\t\t\t\t<Paper className={classes.chatInputPaper} elevation={4}>\n\t\t\t\t\t<div className={classes.chatInput}>\n\t\t\t\t\t\t{messages.map((message: Message) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<React.Fragment key={message.id}>\n                                    <div className={classes.chatRoomMessage}>\n                                        <Avatar alt={message.user.username} src={message.user.avatar} />\n                                        <div className={classes.text}>\n                                            <p className={classes.username}><strong>{message.user.username}</strong></p>\n                                            <Chip label={message.text} />\n                                        </div>\n                                    </div>\n\t\t\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\n\t\t\t\t\t</div>\n\t\t\t\t</Paper>\n                <ChatInput handleSendButton={props.handleSendButton} />\n\t\t\t</section>\n\t\t)\n\n}\n\nChatText.defaultProps = defaultProps\n\nexport default withStyles(chatTextStyles)(ChatText)\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default function FormDialog(props: any) {\n    const [open, setOpen] = useState(true);\n    const [username, setUsername] = useState('');\n\n    const onSubmit = () => {\n        props.onSubmit(username)\n        setOpen(false);\n    };\n\n    const onChangeUsernameInput = (event: any) => {\n        setUsername(event.target.value)\n    }\n\n    return (\n        <div>\n            <Dialog open={open} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Set Username</DialogTitle>\n                <DialogContent>\n                <TextField\n                    onChange={onChangeUsernameInput}\n                    autoFocus\n                    margin=\"dense\"\n                    id=\"name\"\n                    label=\"Username\"\n                    type=\"text\"\n                    fullWidth\n                />\n                </DialogContent>\n                <DialogActions>\n                <Button onClick={onSubmit}  color=\"primary\">\n                    Enter\n                </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react'\nimport useSocket from 'hooks/useSocket'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid'\nimport PeopleList from './components/people-list/PeopleList'\nimport ChatToolbar from './components/chat-toolbar/ChatToolbar'\nimport ChatText from './components/chat-text/ChatText'\nimport { withStyles, createStyles } from '@material-ui/core/styles'\nimport Hidden from '@material-ui/core/Hidden'\nimport LoginForm from './components/login-form/LoginForm'\n\nconst styles = createStyles({\n\troot: {\n\t\tmargin: '16px',\n\t\theight: 'calc(100vh - 32px)'\n\t},\n\tpaper: {\n\t\theight: '100%'\n\t},\n\tgridContainer: {\n\t\theight: 'inherit'\n\t},\n\tgridItem: {\n\t\theight: '100%'\n\t},\n\t'@global': {\n\t\t'body': {\n\t\t\tfontFamily: '\"Roboto\"'\n\t\t}\n\t}\n})\n\ninterface IProps {\n    classes: {\n        root: string\n        paper: string\n        gridContainer: string\n        gridItem: string\n        '@global': string\n    }\n    addMessage?: Function\n}\n\nconst ChatRoom: React.FC<IProps> = props => {\n        const socket: any = useSocket('http://127.0.0.1:3000')\n\n        const { classes } = props\n        \n        const [messages, setMessages] = useState<Array<any>>([]);\n        const [users, setUsers] = useState<Array<any>>([]);\n\n        useEffect(() => {\n            const handleUpdateUsers = (users: any) => {\n                setUsers([...users])\n            }\n\n            if (socket) {\n                socket.on('UPDATE_USERS', handleUpdateUsers)\n            }\n        }, [socket, users])\n\n        useEffect(() => {\n            const handleUpdateMessages = (message: any) => {\n                setMessages(messages => [...messages, message])\n            }\n\n            if (socket) {\n                socket.on('UPDATE_MESSAGES', handleUpdateMessages)\n            }\n        }, [socket])\n\n        const addMessage = (text: string) => {\n            socket.emit('ADD_MESSAGE', text)\n        }\n\n        const addUser = (username: string) => {\n            socket.emit('ADD_USER', username)\n        }\n    \n\t\treturn (\n\t\t\t<div className={classes.root}>\n                <LoginForm onSubmit={addUser} />\n\t\t\t    <Paper className={classes.paper} elevation={2}>\n\t\t\t\t\t<Grid container spacing={0} className={classes.gridContainer}>\n\t\t\t\t\t\t<Hidden mdDown>\n\t\t\t\t\t\t\t<Grid item md={2} className={classes.gridItem}>\n\t\t\t\t\t\t\t\t<PeopleList users={users} />\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t</Hidden>\n\t\t\t\t\t\t<Grid item xs={12} md={10} className={classes.gridItem}>\n\t\t\t\t\t\t\t<ChatToolbar />\n\t\t\t\t\t\t\t<ChatText messages={messages} handleSendButton={addMessage} />\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</Paper>\n\t\t\t</div>\n\t\t)\n}\n\nexport default withStyles(styles)(ChatRoom)\n","import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Chat from 'views/chat/Chat'\nimport 'fontsource-roboto'\nimport './App.css'\n\nconst App = () => {\n    return (\n\t\t<React.Fragment>\n\t\t\t<CssBaseline />\n\t\t\t<Chat />\n\t\t</React.Fragment>\n\t)\n}\n\t\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from 'views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}